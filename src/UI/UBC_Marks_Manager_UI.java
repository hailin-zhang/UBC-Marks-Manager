/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Classes.Course;
import Classes.Grade;
import Classes.Grades;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import javafx.scene.paint.Color;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hailin
 */
public class UBC_Marks_Manager_UI extends javax.swing.JFrame {

    /**
     * Creates new form UBC_Marks_Manager_UI
     */
    public UBC_Marks_Manager_UI() {
        initComponents();
        updateValues();
        initTextHints();
        this.setTitle("UBC Marks Manager V1.13 - Hai Lin Zhang 2018"); // that is the code you looking for
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jTextField2 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jPanel6 = new javax.swing.JPanel();
        copyPastePanel = new javax.swing.JPanel();
        degreeSelectComboBox = new javax.swing.JComboBox<>();
        degreeSelectLabel = new javax.swing.JLabel();
        pasteMarksArea = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        instructionsLabelHTML = new javax.swing.JLabel();
        pasteGradeLabel = new javax.swing.JLabel();
        submitRawText = new javax.swing.JButton();
        addCoursePanel = new javax.swing.JPanel();
        addNumber = new javax.swing.JTextField();
        addGradeLabel = new javax.swing.JLabel();
        addCode = new javax.swing.JTextField();
        addCodeLabel = new javax.swing.JLabel();
        addCourseButton = new javax.swing.JButton();
        addGrade = new javax.swing.JTextField();
        addNumberLabel = new javax.swing.JLabel();
        addCredits = new javax.swing.JTextField();
        addCreditLabel = new javax.swing.JLabel();
        removeCourseButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        averagePanel = new javax.swing.JPanel();
        courseWithoutGradeSelect = new javax.swing.JComboBox<>();
        currentCourseLabel = new javax.swing.JLabel();
        gradeSlider = new javax.swing.JSlider();
        sliderBox = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        showPercent = new javax.swing.JTextArea();
        projectedGradeLabel = new javax.swing.JLabel();
        submitGrade = new javax.swing.JButton();
        selectCredits = new javax.swing.JComboBox<>();
        numCreditsLabel = new javax.swing.JLabel();
        ScrollPane = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        gradeTable = new javax.swing.JTable();
        selectedButton = new javax.swing.JButton();
        calculateAll = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jTextField2.setText("jTextField2");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 168, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 194, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        copyPastePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Copy-paste SSC data here!", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        copyPastePanel.setName(""); // NOI18N

        degreeSelectComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BSC", "BA", "BASC", "BCOM", "BCS", "BKIN", "BMUS" }));

        degreeSelectLabel.setText("First, select your degree program:");

        pasteMarksArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        instructionsLabelHTML.setText("<html>Then, copy-paste the box from \"Your Grades Summary\" on the UBC SSC into the text box on the right, starting from the topmost course, following these instructions: <br> <br><em><u> IMPORTANT INSTRUCTIONS: </u></em> <br> - Copy all the courses starting AFTER the \"Course\" \"Section\" \"Grade\" ... headers! DON'T include them! <br> <br> - This project is still in development! If you see any weird stuff happening or have any suggestions, please let me know!");
        instructionsLabelHTML.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        pasteGradeLabel.setText("<html> <em> Read instructions first! </em> Then, paste your grades here!</html> ");

        submitRawText.setText("Import Grades");
        submitRawText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitRawTextActionPerformed(evt);
            }
        });

        addCoursePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Add a course:"));

        addNumber.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        addNumber.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addNumberFocusGained(evt);
            }
        });

        addGradeLabel.setText("Grade:");

        addCode.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        addCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addCodeFocusGained(evt);
            }
        });

        addCodeLabel.setText("Course Code:");

        addCourseButton.setText("Add Course");
        addCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCourseButtonActionPerformed(evt);
            }
        });

        addGrade.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        addGrade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addGradeFocusGained(evt);
            }
        });

        addNumberLabel.setText("Course Number:");

        addCredits.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        addCredits.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addCreditsFocusGained(evt);
            }
        });

        addCreditLabel.setText("Credits:");

        removeCourseButton.setText("Remove Course");
        removeCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCourseButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel1.setText("<html><i> - To add a course, fill out all fields and press \"Add Course\". Your new course will be shown in the table, and your updated average will be shown in the box below. <br>- To remove a course, either fill out the course code AND the course number fields, or select the courses you want to remove in the table, and click \"Remove Course\".</i><html>");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout addCoursePanelLayout = new javax.swing.GroupLayout(addCoursePanel);
        addCoursePanel.setLayout(addCoursePanelLayout);
        addCoursePanelLayout.setHorizontalGroup(
            addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCoursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(addCoursePanelLayout.createSequentialGroup()
                        .addGroup(addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addCodeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                            .addComponent(addCode))
                        .addGap(40, 40, 40)
                        .addGroup(addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addNumber))
                        .addGap(40, 40, 40)
                        .addGroup(addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addGradeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addCreditLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(addCoursePanelLayout.createSequentialGroup()
                                .addComponent(addCredits, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(addCourseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(removeCourseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        addCoursePanelLayout.setVerticalGroup(
            addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addCoursePanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNumberLabel)
                    .addComponent(addCodeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addGradeLabel)
                    .addComponent(addCreditLabel))
                .addGap(18, 18, 18)
                .addGroup(addCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCredits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addCourseButton)
                    .addComponent(removeCourseButton))
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout copyPastePanelLayout = new javax.swing.GroupLayout(copyPastePanel);
        copyPastePanel.setLayout(copyPastePanelLayout);
        copyPastePanelLayout.setHorizontalGroup(
            copyPastePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(copyPastePanelLayout.createSequentialGroup()
                .addGroup(copyPastePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(degreeSelectLabel)
                    .addGroup(copyPastePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(copyPastePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(degreeSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(instructionsLabelHTML, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(34, 34, 34)
                .addGroup(copyPastePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(copyPastePanelLayout.createSequentialGroup()
                        .addComponent(addCoursePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(14, 14, 14))
                    .addGroup(copyPastePanelLayout.createSequentialGroup()
                        .addGroup(copyPastePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(pasteGradeLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pasteMarksArea, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitRawText, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 285, Short.MAX_VALUE))))
        );
        copyPastePanelLayout.setVerticalGroup(
            copyPastePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(copyPastePanelLayout.createSequentialGroup()
                .addGroup(copyPastePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pasteGradeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(degreeSelectLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(copyPastePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(copyPastePanelLayout.createSequentialGroup()
                        .addComponent(degreeSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(instructionsLabelHTML, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addContainerGap())
                    .addGroup(copyPastePanelLayout.createSequentialGroup()
                        .addGroup(copyPastePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pasteMarksArea, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(submitRawText))
                        .addGap(18, 18, 18)
                        .addComponent(addCoursePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        averagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Your cumulative average:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        currentCourseLabel.setText("Current course (with no grade on SSC):");

        gradeSlider.setMinorTickSpacing(1);
        gradeSlider.setPaintLabels(true);
        gradeSlider.setPaintTicks(true);
        gradeSlider.setSnapToTicks(true);
        gradeSlider.setToolTipText("");
        gradeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gradeSliderStateChanged(evt);
            }
        });

        sliderBox.setEditable(false);
        sliderBox.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N

        showPercent.setEditable(false);
        showPercent.setColumns(1);
        showPercent.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 28)); // NOI18N
        showPercent.setRows(1);
        showPercent.setText("0.00%");
        showPercent.setToolTipText("");
        showPercent.setAutoscrolls(false);
        jScrollPane1.setViewportView(showPercent);

        projectedGradeLabel.setText("Projected Grade from 0% to 100%:");

        submitGrade.setText("Update Mark");
        submitGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitGradeActionPerformed(evt);
            }
        });

        selectCredits.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", " " }));

        numCreditsLabel.setText("Number of Credits:");

        gradeTable.setAutoCreateRowSorter(true);
        gradeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course", "Grade", "Credits", "Section Average", "Section Difference"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(gradeTable);

        ScrollPane.setViewportView(jScrollPane2);

        selectedButton.setText("Calculate Selected Grades!");
        selectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectedButtonActionPerformed(evt);
            }
        });

        calculateAll.setText("Calculate All Grades!");
        calculateAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateAllActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel3.setText("<html><i>- The combo box above shows courses on the SSC with no grades. You may update the number of credits of each course, and then select the grade you wish to receive using the slider. Clicking \"Update Mark\" will show your new mark for the selected course in the table, and update your average in the text box above.<br> - To select courses in the table, hold CTRL and click on selected courses. <br> - You can calculate your average with only the selected courses by clicking \"Calculate Selected Grades!\" and re-calculate all grades using the \"Calculate All Grades!\" button. <br> - You can sort the table by column by clicking on the headers. </i></html>");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout averagePanelLayout = new javax.swing.GroupLayout(averagePanel);
        averagePanel.setLayout(averagePanelLayout);
        averagePanelLayout.setHorizontalGroup(
            averagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(averagePanelLayout.createSequentialGroup()
                .addGroup(averagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(averagePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(averagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addGroup(averagePanelLayout.createSequentialGroup()
                                .addComponent(currentCourseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(numCreditsLabel))
                            .addGroup(averagePanelLayout.createSequentialGroup()
                                .addGroup(averagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(sliderBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(gradeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(submitGrade))
                            .addComponent(projectedGradeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(courseWithoutGradeSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(averagePanelLayout.createSequentialGroup()
                                .addGap(243, 243, 243)
                                .addComponent(selectCredits, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(averagePanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(calculateAll, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(averagePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE)
                .addContainerGap())
        );
        averagePanelLayout.setVerticalGroup(
            averagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(ScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
            .addGroup(averagePanelLayout.createSequentialGroup()
                .addGroup(averagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentCourseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numCreditsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(averagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(courseWithoutGradeSelect, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                    .addComponent(selectCredits))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(averagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectedGradeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sliderBox, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(submitGrade))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(gradeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(averagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(calculateAll, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(selectedButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(copyPastePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(averagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(copyPastePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(averagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gradeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gradeSliderStateChanged
        // TODO add your handling code here:
        updateValues();
    }//GEN-LAST:event_gradeSliderStateChanged

    
    //CALLED only when all current courses known
    private void submitGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitGradeActionPerformed
        // TODO add your handling code here:
        Grades instance = Grades.getInstance();
        try{
            for(Course course : instance.getCurrent()){
                //find the course
                //IMPORTANT: overwrote equals in Course so have to do it in this order!!!
                if(courseWithoutGradeSelect.getSelectedItem().toString().equals(course.getCourseName() + " " 
                        + course.getCourseNumber() + " section " + course.getSection())){
                    //update its grade
                    Grade currentGrade = new Grade((double) Integer.parseInt(selectCredits.getSelectedItem().toString()),
                            (double) Integer.parseInt(sliderBox.getText()));
                    //update its key
                    instance.putCourse(course, currentGrade);
                }
            }
            //show average
            updateAverage(instance);
            //update table
            updateTable(instance);
        }
        catch(Exception e){ 
        JOptionPane.showMessageDialog(null, "Malformed input!");
        }
    }//GEN-LAST:event_submitGradeActionPerformed

    private void submitRawTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitRawTextActionPerformed
        // TODO add your handling code here:
        Grades instance = Grades.getInstance();
        try{
            instance.setFields(pasteMarksArea.getText(), degreeSelectComboBox.getSelectedItem().toString());
            instance.parseCoursesAndGrades();
            //show current average
            updateAverage(instance);
            //show unknown courses
            ArrayList<Course> courses = instance.getCurrent();
            String[] courseNames = new String[courses.size()];
            for(int i = 0; i < courses.size(); i++){
                Course curr = courses.get(i);
                courseNames[i] = curr.getCourseName() + " " + curr.getCourseNumber() + " section " + curr.getSection();
            }
            DefaultComboBoxModel mod = new DefaultComboBoxModel(courseNames);
            courseWithoutGradeSelect.setModel(mod);
            //update table
            updateTable(instance);
         }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Input in wrong format! Did you select the right degree program?");
        }
    }//GEN-LAST:event_submitRawTextActionPerformed

    private void addCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCourseButtonActionPerformed
        // TODO add your handling code here:
        Grades instance = Grades.getInstance();
        try{
            Grade newGrade = new Grade(Double.parseDouble(addCredits.getText()), Double.parseDouble(addGrade.getText()));
            Course newCourse = new Course(addCode.getText(), addNumber.getText(), "", 0);
            instance.putCourse(newCourse, newGrade);
            updateTable(instance);
            updateAverage(instance);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Malformed input! " + e.getMessage());
        }
       
        
   
    }//GEN-LAST:event_addCourseButtonActionPerformed

    private void removeCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCourseButtonActionPerformed
        // TODO add your handling code here:
        Grades instance = Grades.getInstance();
        try{
            //remove from text box
            Course newCourse = new Course(addCode.getText(), addNumber.getText(), "", 0);
            instance.removeCourse(newCourse);
            //remove selected from table
            int[] selectedRows = gradeTable.getSelectedRows();
            for(int row : selectedRows){
                String[] text = ((String) gradeTable.getValueAt(row, 0)).split(" ");
                Course course =  new Course(text[0], text[1], text[2], Double.parseDouble(((String) gradeTable.getValueAt(row, 3))));
                instance.removeCourse(course);
            }
            updateTable(instance);
            updateAverage(instance);
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Malformed input!");
        }   
    }//GEN-LAST:event_removeCourseButtonActionPerformed

    private void selectedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectedButtonActionPerformed
        // TODO add your handling code here:
        double totalMarks = 0.0;
        double totalCredits = 0.0;
        try{
            int[] selectedRows = gradeTable.getSelectedRows();
            for(int row : selectedRows){
               Object grade =  gradeTable.getValueAt(row, 1);
               Object credit = gradeTable.getValueAt(row, 2);
               totalMarks += Double.parseDouble((String) grade) * Double.parseDouble((String) credit);
               totalCredits += Double.parseDouble((String) credit);
               double avg = totalMarks / totalCredits;
               showPercent.setText("Average: " + twoDecimal(avg)+"%"+ "\nAs 4.0 GPA: " 
                       + twoDecimal((avg/20)-1) + "\nAs 4.33 GPA: " + convertFourPointThreeThreeGPA(avg));
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Malformed input!");
        }
    }//GEN-LAST:event_selectedButtonActionPerformed

    private void calculateAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateAllActionPerformed
        // TODO add your handling code here:
        Grades instance = Grades.getInstance();
          updateTable(instance);
        updateAverage(instance);
    }//GEN-LAST:event_calculateAllActionPerformed

    private void addCodeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addCodeFocusGained
        // TODO add your handling code here:
        addCode.setText("");
    }//GEN-LAST:event_addCodeFocusGained

    private void addNumberFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addNumberFocusGained
        // TODO add your handling code here:
         addNumber.setText("");
    }//GEN-LAST:event_addNumberFocusGained

    private void addGradeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addGradeFocusGained
        // TODO add your handling code here:
        
        addGrade.setText("");
    }//GEN-LAST:event_addGradeFocusGained

    private void addCreditsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addCreditsFocusGained
        // TODO add your handling code here:
        addCredits.setText("");
    }//GEN-LAST:event_addCreditsFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UBC_Marks_Manager_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UBC_Marks_Manager_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UBC_Marks_Manager_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UBC_Marks_Manager_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UBC_Marks_Manager_UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JTextField addCode;
    private javax.swing.JLabel addCodeLabel;
    private javax.swing.JButton addCourseButton;
    private javax.swing.JPanel addCoursePanel;
    private javax.swing.JLabel addCreditLabel;
    private javax.swing.JTextField addCredits;
    private javax.swing.JTextField addGrade;
    private javax.swing.JLabel addGradeLabel;
    private javax.swing.JTextField addNumber;
    private javax.swing.JLabel addNumberLabel;
    private javax.swing.JPanel averagePanel;
    private javax.swing.JButton calculateAll;
    private javax.swing.JPanel copyPastePanel;
    private javax.swing.JComboBox<String> courseWithoutGradeSelect;
    private javax.swing.JLabel currentCourseLabel;
    private javax.swing.JComboBox<String> degreeSelectComboBox;
    private javax.swing.JLabel degreeSelectLabel;
    private javax.swing.JSlider gradeSlider;
    private javax.swing.JTable gradeTable;
    private javax.swing.JLabel instructionsLabelHTML;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel numCreditsLabel;
    private javax.swing.JLabel pasteGradeLabel;
    private javax.swing.JTextField pasteMarksArea;
    private javax.swing.JLabel projectedGradeLabel;
    private javax.swing.JButton removeCourseButton;
    private javax.swing.JComboBox<String> selectCredits;
    private javax.swing.JButton selectedButton;
    private javax.swing.JTextArea showPercent;
    private javax.swing.JTextField sliderBox;
    private javax.swing.JButton submitGrade;
    private javax.swing.JButton submitRawText;
    // End of variables declaration//GEN-END:variables

    private void updateValues() {
        sliderBox.setText(gradeSlider.getValue()+"");
    }

    private double convertFourPointThreeThreeGPA(double avg) {
        int avgInt = (int) Math.round(avg);
        if(avg >= 90.0)
            return 4.33;
        else if(avg <= 50.0)
            return 1.00;
        else{
        switch(avgInt){
            case 89:
                return 4.30;
            case 88:
                return 4.20;
            case 87: 
                return 4.10;
            case 86:
                return 4.00;
            case 85:
                return 3.95;
            case 84: 
                return 3.90;
            case 83:
                return 3.85;
            case 82:
                return 3.80;
            case 81: 
                return 3.75;
            case 80:
                return 3.70;
            case 79:
                return 3.60;
            case 78: 
                return 3.50;
            case 77:
                return 3.40;
            case 76:
                return 3.30;
            case 75: 
                return 3.20;
            case 74:
                return 3.10;
            case 73:
                return 3.00;
            case 72: 
                return 2.95;
            case 71:
                return 2.90;
            case 70:
                return 2.80;
            case 69: 
                return 2.70;
            case 68:
                return 2.65;
            case 67:
                return 2.60;
            case 66: 
                return 2.55;
            case 65: 
                return 2.50;
            case 64:
                return 2.40;
            case 63:
                return 2.30;
            case 62: 
                return 2.20;
            case 61:
                return 2.10;
            case 60:
                return 2.00;
            case 59: 
                return 1.90;
            case 58:
                return 1.80;
            case 57:
                return 1.70;
            case 56: 
                return 1.60;
            case 55:
                return 1.50;
            case 54:
                return 1.40;
            case 53: 
                return 1.30;
            case 52:
                return 1.20;
            case 51:
                return 1.10;
            }
        }
        return 0;
    }

    private void updateTable(Grades instance) {
        //get the model
        DefaultTableModel model = (DefaultTableModel) gradeTable.getModel();
//        updateColors(model);
        //reset rows
        model.setRowCount(0);
        HashMap courseInfo = instance.getCourses();
        double currentGrade;
        String currentCourse;
        //for each course, display 
        for(Object course : courseInfo.keySet()){
            currentGrade = ((Grade) courseInfo.get(course)).getGrade();
            currentCourse = ((Course) course).getCourseName() + " " + ((Course) course).getCourseNumber() + " " 
                    + ((Course) course).getSection();
            double difference = (twoDecimal(currentGrade) - ((Course) course).getSectionAverage());
            model.addRow( new String[] {currentCourse, twoDecimal(currentGrade) + "", 
                ((Grade) courseInfo.get(course)).getCredits() + " ", ((Course) course).getSectionAverage() + "", 
                ((Course) course).getSectionAverage() == 0 ? "+" + 0 : ((difference >= 0 ? "+" : "-") + difference  + "" )});
        }
    }

    private void updateAverage(Grades instance) {
        double avg = instance.getCumulativeAverage();
        showPercent.setText("Average: " + twoDecimal(avg)+"%"+ "\nAs 4.0 GPA: " + twoDecimal((avg/20)-1)
                + "\nAs 4.33 GPA: " + convertFourPointThreeThreeGPA(avg));
    }

    private double twoDecimal(double curr) {
       return Math.round(curr*100.0)/100.0;
    }

//    private void updateColors(DefaultTableModel model) {
//        Color[] colors = {Color.ALICEBLUE, Color.ANTIQUEWHITE, Color.BISQUE, Color.CADETBLUE,
//            Color.DARKGOLDENROD, Color.GREENYELLOW, Color.INDIANRED, Color.HOTPINK, Color.MEDIUMSLATEBLUE, Color.PLUM};
//         int[] selectedRows = gradeTable.getRows();
//         //O(n^2), goes across every row for every row to see if same course name
//         for(int i = 0; i < selectedRows.length; i++){
//                Object currentCourseCode =  gradeTable.getValueAt(selectedRows[i], 0);
//                int j = 0;
//                int sameRow = -1; //dummy value
//                //iterates through previous rows and sees if the course code is the same for any previous
//                //if it is, updates sameRow to its row value and stops iterating
//                //otherwise, continues and sameRow will stay at -1
//                while(j < i){
//                    Object pastCourseCode = gradeTable.getValueAt(selectedRows[j], 0);
//                    if(((String) pastCourseCode).equals(((String)currentCourseCode))){
//                        sameRow = j;
//                        break;
//                    }     
//                }
//                 Component comp = super.getTableCellRendererComponent(
//                      gradeTable,  null, false, false, i, k);
//                if(sameRow == -1){
//                    gradeTable.setRowColor(colors[i]);
//                }
//         }
//    }

    private void initTextHints() {
         addCode.setText("BIOL");
         addNumber.setText("112");
         addGrade.setText("100");
         addCredits.setText("3");
    }

}
